SSL Certificate Management â€“ Overview
ðŸ”¹ What
- Managing SSL/TLS certificates ensures secure HTTPS communication between clients and servers by encrypting data in transit.

ðŸ”¹ Why
- Ensures data confidentiality and integrity.

- Enables authentication of the server.

- Prevents MITM attacks.

ðŸ”¹ When
- For public websites, internal services, APIs, load balancers, etc.

- During certificate expiry/rotation, renewals, and infrastructure changes.

ðŸ”¹ Where
- On web servers (Nginx, Apache), load balancers (ALB, NLB), CDNs, containers, Kubernetes Ingress, etc.

ðŸ”¸ Key Activities in Certificate Management
Procurement

- Buy from CA (DigiCert, GoDaddy) or use free ones (Let's Encrypt).

- Installation

- Configure cert/key pair in Nginx, Apache, ELB, etc.

- Renewal

- Manual or automated (cron, Certbot, AWS ACM auto-renew).

- Monitoring

- Track expiry with tools like Nagios, Prometheus + Alertmanager, or custom scripts.

- Rotation

- Replace before expiry or on compromise

- Revocation

- Invalidate via CRL/OCSP if compromised

- Automation

- Use Ansible, Terraform + AWS ACM, Cert-Manager (K8s)

Example (Nginx + Let's Encrypt)
- sudo apt install certbot python3-certbot-nginx
- sudo certbot --nginx -d yourdomain.com

Diagram (Simplified)
[Browser] â‡„ HTTPS â‡„ [Web Server w/ SSL Cert] â‡„ Backend
        â‡¡ Certbot / ACM / Vault handles rotation

- Production Use Case
- Auto-renewing certs via Cert-Manager in Kubernetes Ingress.

- Managing ACM certs in AWS ELB with Terraform.

- Using Vault to issue ephemeral SSL certs for microservices.
