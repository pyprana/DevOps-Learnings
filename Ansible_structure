- Sample Ansible Playbook for Deployment 
- Designed to deploy a web application, manage sevices and ensure the system is in desired state.

Directory Structure
|-------------------ansible.cfg
|-------------------inventory.yml
|-------------------playbook.yml
|-------------------roles
                      |-------------------Webserver
                                              |-------------------tasks
                                                                    |-------------------main.yaml
                                                                    |-------------------install.yml
                                                                    |-------------------deploy.yml
                                                                    |-------------------configure.yml
                                              |-------------------templates
                                                                    |-------------------nginx.conf.j2
                                              |-------------------vars/
                                                                    main.yaml
1.ansible.cfg
[defaults]
inventory=inventory.yaml
remote_user=ubuntu
become=true
host_key_checking=false

- anisble.cfg(configuration file)
- inventory - Specifies the default inventory file avoid manually specifying it every time.
- remote - user - defines the user ansible should connect as (e.g./ ubuntu, ec2-user etc.)
- become-true - Enables priviliges escalation (like sudo) for administrative tasks.
- host-key-checking : False - disables strict hosts key checking to prevent connection issues on first time ssh connectiones (use carefully in production)
  (- Ansible will not check the identity of the remote server when connecting via SSH for the first time.
   - This avoids connection errors if the host is new or not listed in the known hosts.
   - You might connect to a fake or malicious server without knowing it — not safe for production.)
*It tells Ansible "don’t ask questions when connecting to a new machine for the first time — just connect."*


2.inventory.yml
all:
    hosts:
    web01:
        ansible_host:192.168.1.100
    web02:
        ansiblehost:192.168.1.101
    vars:
        ansiblepythoninterpreter:

- inventory.yml(inventory file)
- Why its required.
- Defines your infrastructure, grouping, servers under all.
- Specifies host ips for connectivity.
- The anisble-python-interpreter:/usr/bin/python.

- vars: ansible_python_interpreter — Explained
-  What is it?
- ansible_python_interpreter is a variable that tells Ansible which Python executable to use on the target machine.

- Why is it needed?
- Some systems have:

- Multiple Python versions (e.g., Python 2 & 3)

- Python not at default path (/usr/bin/python)

- Virtual environments

- To avoid issues, you explicitly set the path.

- Example:
- yaml
- vars:
    ansible_python_interpreter: /usr/bin/python3
- This tells Ansible to run Python 3 on the target.

- Where can you define it?
- In vars: block

- In inventory file

- In host/group vars

- As a role default

- Real use case:
- You're connecting to a Ubuntu host where only Python 3 is installed:

- ini
- [ubuntu]
  10.0.0.1 ansible_python_interpreter=/usr/bin/python3

3.playbook.yml
- name:web application deployment 
  hosts:all
  roles:
    -  webserver

- playbook.yml(Main Playbook file)
- Why its required.
- This is the entry point of your deployment 
- hosts : all - Targets all servers defined in the inventory file
- roles : Uses a modular approach to separate concerns via roles(best practice for scalability).

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

my_role/
├── tasks/         # main.yml (mandatory)
├── handlers/      # main.yml
├── defaults/      # main.yml (default vars)
├── vars/          # main.yml (non-overridable vars)
├── files/         # static files to copy
├── templates/     # Jinja2 templates
├── meta/          # role dependencies
└── README.md      # description

- What is an Ansible Role?
- A role is a structured way to organize Ansible playbooks, tasks, variables, handlers, templates, and files.
- It helps break complex playbooks into reusable components.

- Why use Roles?
- Modular code: Easier to manage and reuse.

- Scalability: Share roles across projects or teams.

- Standard structure: Easier collaboration and automation.

- How to create a Role?
- ansible-galaxy init my_role

- Example of Using a Role in Playbook:
- hosts: web
  roles:
    - my_role

- When to Use?
- Projects with multiple tasks/files

- Need reusability and cleaner code

- In production-grade deployments

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

4.roles/webserver/tasks/main.yaml(main role task file)
- name: Install required packages
import-tasks:install.yml
- name: deploy application
import-tasks:deploy.yml
- name: Configuration Services
import-tasks:Configure.yml

- Why its required
- import

5.roles/webserver/tasks/install.yml(Installation Tasks)
- name: Update package cache
apt: 
    Update-cache:yes
- name: Install nginx and dependencies
apt:
  name:
  - nginx
  - git
  - pythob3-pip

6.roles/webserver/tasks/deploy.yml(Deployment Tasks)
- name: Clone web application repository
  git:
    repo: "https://github.com/example/webapp.git"
    dest: //var/www/webapp
    version: main
- name: Install application dependecies.
   pip:
        requirements: /var/www/webapp/requirements.txt

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible: A tool for automating IT tasks.
Usage in Project:
Configuration Management: Ensuring that all systems are set up correctly and consistently.
Deployment: Automating the process of deploying applications to multiple servers.
Orchestration: Coordinating complex multi-step processes across multiple systems.
state:present

Q - Tell me about the playbook you used for the deployment of the new changes. 
A - Playbook: A file with a list of tasks for Ansible to execute.
  - Used For Deployment:
  - Hosts: Specifies the target servers.
  - Tasks: Define the steps to apply the new changes.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Ansible Tower (now Red Hat Ansible Automation Controller) is a web-based UI and REST API for managing Ansible.

- What:
- A centralized tool to manage, schedule, and monitor Ansible playbook executions.

- Why:
- Role-based access control

- Logging/auditing

- Inventory management

- API integration

- Workflow orchestration

- Job scheduling

- When:
- Use when:

- Teams collaborate on automation

- Need a visual dashboard or RBAC

- Automating at scale

- Where:
- Used in enterprise setups to automate IT ops across VMs, cloud, and on-prem.

- Key Components:
- Templates: Define what playbooks to run

- Inventories: Target systems

- Credentials: Store SSH/API keys securely

- Workflows: Chain multiple jobs

- Schedules: Automate run timing

- RBAC: Control who can do what

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
