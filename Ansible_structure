Sample Ansible Playbook for Deployment 
- Designed to deploy a web application, manage sevices and ensure the system is in desired state.

Directory Structure
|-------------------ansible.cfg
|-------------------inventory.yml
|-------------------playbook.yml
|-------------------roles
                      |-------------------Webserver
                                              |-------------------tasks
                                                                    |-------------------main.yaml
                                                                    |-------------------install.yml
                                                                    |--------------------deploy.yml
                                                                    |-------------------configure.yml
                                              |-------------------templates
                                                                    |-------------------nginx.conf.j2
                                              |-------------------vars/
                                                                    main.yaml
1.ansible.cfg
[defaults]
inventory=inventory.yaml
remote_user=ubuntu
become=true
host_key_checking=false

anisble.cfg(configuration file)
- inventory - Specifies the default inventory file avoid manually specifying it every time.
- remote - user - defines the user ansible should connect as (e.g./ ubuntu, ec2-user etc.
- become-true - Enables priviliges escalation (like sudo) for administrative tasks.
- host-key-checking : False -disables strict hosts key checking to prevent connection issues on first time ssh connectiones (use carefully in production)
  (Ansible will not check the identity of the remote server when connecting via SSH for the first time.
  This avoids connection errors if the host is new or not listed in the known hosts.
  You might connect to a fake or malicious server without knowing it — not safe for production.)
*It tells Ansible "don’t ask questions when connecting to a new machine for the first time — just connect."*

2.inventory.yml
all:
    hosts:
    web01:
        ansible_host:192.168.1.100
    web02:
        ansiblehost:192.168.1.101
    vars:
        ansiblepythoninterpreter:

inventory.yml(inventory file)
- Why its required.
- Defines your infrastructure, grouping, servers under all.
- Specifies host ips for connectivity.
The anisble-python-interpreter:/usr/bin/python.


3.playbook.yml
- name:web application deployment 
  hosts:all
  roles:
    -  webserver

playbook.yml(Main Playbook file)
- Why its required.
- This is the entry point of your deployment 
- hosts : all - Targets all servers defined in the inventory file
- roles : Uses a modular approach to separate concerns via roles(best practice for scalability)

4.roles/webserver/tasks/main.yaml(main role task file)
- name: Install required packages
import-tasks:install.yml
- name: deploy application
import-tasks:deploy.yml
- name: Configuration Services
import-tasks:Configure.yml

5.roles/webserver/tasks/install.yml(Installation Tasks)
- name: Update package cache
apt: 
    Update-cache:yes
- name: Install nginx and dependencies
apt:
  name:
  - nginx
  - git
  - pythob3-pip
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Ansible: A tool for automating IT tasks.
Usage in Project:
Configuration Management: Ensuring that all systems are set up correctly and consistently.
Deployment: Automating the process of deploying applications to multiple servers.
Orchestration: Coordinating complex multi-step processes across multiple systems.
state:present

Q - Tell me about the playbook you used for the deployment of the new changes. 
A - Playbook: A file with a list of tasks for Ansible to execute.
  - Used For Deployment:
  - Hosts: Specifies the target servers.
  - Tasks: Define the steps to apply the new changes.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Ansible Tower (now Red Hat Ansible Automation Controller) is a web-based UI and REST API for managing Ansible.

- What:
- A centralized tool to manage, schedule, and monitor Ansible playbook executions.

- Why:
- Role-based access control

- Logging/auditing

- Inventory management

- API integration

- Workflow orchestration

- Job scheduling

- When:
- Use when:

- Teams collaborate on automation

- Need a visual dashboard or RBAC

- Automating at scale

- Where:
- Used in enterprise setups to automate IT ops across VMs, cloud, and on-prem.

- Key Components:
- Templates: Define what playbooks to run

- Inventories: Target systems

- Credentials: Store SSH/API keys securely

- Workflows: Chain multiple jobs

- Schedules: Automate run timing

- RBAC: Control who can do what

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
