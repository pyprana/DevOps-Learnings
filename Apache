- Apache webserver
- Apache Web Server (also known as httpd) is an open-source web server software that delivers web content over the internet using the HTTP protocol.

- What:
- It serves static (HTML, images) and dynamic (via PHP, Python) content to clients.

- Why:
- Reliable, widely supported, modular, and configurable.

- When:
- Used when you need a flexible, stable web server for websites or backend services.

- Where:
- Runs on Linux, Windows, macOS. Commonly used in LAMP stacks (Linux, Apache, MySQL, PHP).

- Key Features:
- Virtual hosting (host multiple sites)

- Loadable modules (e.g., mod_ssl, mod_rewrite)

- .htaccess support for per-directory configs

- SSL/TLS support

- Example:
- To install on Ubuntu:

- bash
- sudo apt update
- sudo apt install apache2
- To start the server:

- bash
- sudo systemctl start apache2

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Key Configurations in Apache httpd:
Main Configuration File

Location: /etc/httpd/conf/httpd.conf or /etc/apache2/apache2.conf

Controls global server settings like ports, modules, user/group, and includes.

Virtual Hosts

Define multiple domains/sites.

Files in /etc/httpd/conf.d/ or /etc/apache2/sites-available/

Example:

apache
Copy
Edit
<VirtualHost *:80>
  ServerName example.com
  DocumentRoot /var/www/example
</VirtualHost>
Modules

Enabled via LoadModule in config.

Common: mod_ssl, mod_rewrite, mod_proxy, mod_php.

DocumentRoot

Defines the folder serving content.

Example: DocumentRoot "/var/www/html"

Directory-Level Settings

Control access, rewrites, indexes.

Example:

apache
Copy
Edit
<Directory "/var/www/html">
  Options Indexes FollowSymLinks
  AllowOverride All
  Require all granted
</Directory>
Ports Configuration

File: /etc/httpd/conf/ports.conf or httpd.conf

Example: Listen 80, Listen 443

SSL/TLS

Configured in /etc/httpd/conf.d/ssl.conf

Uses SSLCertificateFile, SSLCertificateKeyFile

Logging

Access log: /var/log/httpd/access_log

Error log: /var/log/httpd/error_log

Config: LogLevel, CustomLog, ErrorLog

.htaccess (Optional)

Per-directory overrides (if AllowOverride All is set).

Useful for rewrites, redirects, access control.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- The primary purpose of Apache httpd is to serve web content (HTML, images, scripts) to clients (usually browsers) over the HTTP/HTTPS protocols.

- Core Functions:
- Deliver static content (e.g., HTML, CSS, JS, images).

- Interface with dynamic content via CGI, PHP, or reverse proxy.

- Handle virtual hosting (multiple websites on one server).

- Provide SSL/TLS encryption.

- Support URL rewriting, redirects, and access control.

- Used widely in traditional LAMP stack deployments.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Common Use Cases of Apache HTTPD:
- Static Website Hosting
- Serve HTML, CSS, JavaScript, and image files for personal or company websites.

- Reverse Proxy Server
- Forward client requests to backend servers (e.g., Apache Tomcat, Nginx, Node.js).

- Load Balancer
- Distribute incoming traffic across multiple backend servers using mod_proxy_balancer.

- Dynamic Web Hosting
- Run PHP, Python, or Perl scripts using modules like mod_php, mod_wsgi, or CGI.

- Virtual Hosting
- Host multiple websites/domains on a single server using name-based or IP-based virtual hosts.

- Secure File Delivery
- Serve files over HTTPS using mod_ssl with authentication and access control.

- Application Gateway
- Serve as a gateway between users and web applications (e.g., WordPress, Django apps).

- Custom URL Rewriting & Redirects
- Use .htaccess and mod_rewrite to manage SEO-friendly URLs or redirect traffic.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Set up a load-balanced cluster using Apache with the mod_proxy and mod_proxy_balancer modules.

- Objective:
- Distribute traffic to multiple backend servers (Apache or app servers) for scalability and high availability.

- Steps to Create an Apache Load Balancer Cluster:
- Install Apache on Load Balancer Node

- bash
- sudo apt update
- sudo apt install apache2
- Enable Required Modules

bash
- sudo a2enmod proxy
- sudo a2enmod proxy_balancer
- sudo a2enmod proxy_http
- sudo a2enmod lbmethod_byrequests
- sudo systemctl restart apache2
- Create a Balancer Virtual Host Config
- Example config file: /etc/apache2/sites-available/balancer.conf

- apache
<VirtualHost *:80>
  ServerName loadbalancer.example.com

  <Proxy "balancer://mycluster">
    BalancerMember http://192.168.1.101:80
    BalancerMember http://192.168.1.102:80
    ProxySet lbmethod=byrequests
  </Proxy>

  ProxyPass "/" "balancer://mycluster/"
  ProxyPassReverse "/" "balancer://mycluster/"
</VirtualHost>
Enable the Site and Restart Apache

- bash
sudo a2ensite balancer.conf
sudo systemctl reload apache2
Ensure Backend Nodes (192.168.1.101, 102) Run Apache/App

- Result:
- Apache now routes traffic to multiple backend nodes using round-robin or other balancing methods.

