Sructure of Helm Chart
- chart.yaml - metadata
- values.yaml - default config
- templates/ - actual k8s manifests
- charts/ - dependencies
- README.md(optional)
- templates/tests(optional)

Q - What is helm?
A - Helm is a kubernetes package manager
- Simplifies deployment of complex applications.
- Use when you need repeatble versioned kubernetes deployments
- Used in CICD pipelines local, dev, production.
- Ex: Installing NGINX with a single helm install.

Q - What are helm Charts?
A - A helm chart is a collection of YAML files that define kubernetes resources.
- Package Kubernetes Manifests for reuse and resharing.
- When deploying an app or service to Kubernetes.
- Stored in helm repos or local directories.
- Ex: Bitnami/Nginx charts install NGINX.

Q - What is values.yaml?
A - Default configuration for templates.
- Central place to manage variables.
- Set global or service-specific config.
- Located in chart tool.
- Ex: replicaCount:3, image: tag:"1.2"

Q - How does values.yaml work?
A - Inject values into templates via{{.values<key>}}.
- To separate config from code.
- Customize depoyments without modifying templates.
- Ex - Overwirte with --set image.tag=2.0

Q - What is helm release.?
A - A deployed instance of helm chart.
- Manage state/version/history of an app.
- Each install/upgrade = new release version.

Q - Helm Rollback Strategies
A - Helm provides built-in mechanisms to roll back deployments when something goes wrong. Below are key strategies:

- Helm Built-in Rollback
- What:
- Rollback to a previous revision of a Helm release.

- Why:
- To quickly revert to a known good state when a Helm upgrade causes failure.

- When:
- Application crashes after upgrade

- Wrong configuration deployed

- Health checks failing
- helm rollback <release-name> [REVISION]

 - Check History:
- helm history my-app

- What is Helm, and why is it used in Kubernetes?

- Helm is a package manager for Kubernetes that simplifies the deployment and management of Kubernetes applications. 
- It uses charts, which are packages of pre-configured Kubernetes resources, to define and install applications. 
- Helm makes it easier to version, share, and manage complex application deployments on Kubernetes.
- How do you install Helm and initialize a Helm chart repository?

- To install Helm, you can typically use a package manager like apt or brew, or download the binary from the Helm GitHub releases page. 
- Once Helm is installed, initialize a chart repository using the following command:

- helm repo add <repository-name> <repository-url>

- What is a Helm chart?

- A Helm chart is a package of pre-configured Kubernetes resources. 
- It contains templates, values, and optional files to define how an application should be deployed on a Kubernetes cluster. 
- Charts make it easy to share and deploy applications consistently.

- How do you create a new Helm chart?
- To create a new Helm chart, you can use the helm create command. For example:

- helm create mychart
- This command generates the basic directory structure and files for a Helm chart.

- What is the difference between a Helm release and a Helm chart?
- A Helm chart is a package containing Kubernetes resource definitions, templates, and configuration. A Helm release is an instance of a Helm chart deployed on a Kubernetes cluster. You can have multiple releases of the same chart with different configurations.

- How do you deploy a Helm chart to a Kubernetes cluster?
- To deploy a Helm chart, use the helm install command. For example:

- helm install my-release mychart
- This command deploys the chart named mychart as a release named my-release to the cluster.

- What are Helm values and how are they used?
- Helm values are configuration parameters that can be customized when deploying a Helm chart. 
- Values are defined in values.yaml file or provided using the --set flag during installation. 
- They allow users to tailor the chart's behavior to their specific requirements.

- What is a Helm template, and how does it work?
- A Helm template is a Kubernetes manifest generated from a Helm chart's templates and values. 
- Helm uses the Go templating engine to interpolate values into the templates, producing valid Kubernetes YAML files that are ready for deployment.

- How do you upgrade a Helm release to a new version of a chart?
- To upgrade a Helm release, use the helm upgrade command. For example:

- helm upgrade my-release mychart
- Helm will apply the changes from the new version of the chart to the existing release.

- What is a Helm hook, and when might you use one?
- A Helm hook is a way to perform actions at specific points in the Helm lifecycle, such as before or after a release is installed, upgraded, or deleted. 
- Hooks are useful for tasks like database migrations or certificate issuance.

- Explain the difference between Helm 2 and Helm 3.
- Helm 2 used a server-side component called Tiller, which was removed in Helm 3 to improve security and simplicity. 
- Helm 3 introduced several improvements, including better support for security, a restructured chart directory, and improved chart dependencies management.

- What are Helm repositories, and how do you add or remove them?
- Helm repositories are locations where Helm charts are stored and can be fetched from. 
- You can add a repository using helm repo add and remove it using helm repo remove.

- How do you rollback a Helm release to a previous version?
- To rollback a Helm release, use the helm rollback command. For example:

- helm rollback my-release 2
- This command rolls back the release named my-release to revision 2.

- What is Tiller, and why was it removed in Helm 3?

- Tiller was the server-side component in Helm 2 that managed releases. 
- It was removed in Helm 3 to improve security because Tiller had access to the Kubernetes API with extensive permissions, which posed a security risk.

- How can you secure Helm deployments in a Kubernetes cluster?
- To secure Helm deployments, you can:
- Use RBAC (Role-Based Access Control) to limit permissions.
- Ensure that Helm and Kubernetes API are secured with appropriate authentication and authorization mechanisms.
- Sign and verify Helm charts to ensure their integrity.

- How do you manage dependencies in Helm charts?
- Use the requirements.yaml file to specify chart dependencies. Helm will fetch and install these dependencies when deploying the parent chart.

- What is the purpose of Helm plugins, and can you name a few useful Helm plugins?
- Helm plugins extend Helm's functionality. 
- Some useful Helm plugins include helm-diff for showing differences between releases, helm-secrets for managing secrets, and helmfile for managing multiple Helm releases.

- How do you perform linting and testing of Helm charts?
- Use helm lint to check chart validity. To test Helm charts, you can create test pods or use tools like helm test to run tests defined in the chart.
