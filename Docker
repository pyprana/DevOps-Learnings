1. What is Hypervisor?
- A hypervisor is a software that makes virtualization possible. It is also called Virtual Machine Monitor. 
- It divides the host system and allocates the resources to each divided virtual environment. You can basically have multiple OS on a single host system. 
- There are two types of Hypervisors:

- Type 1: It’s also called Native Hypervisor or Bare metal Hypervisor. It runs directly on the underlying host system. 
- It has direct access to your host’s system hardware and hence does not require a base server operating system.

- Type 2: This kind of hypervisor makes use of the underlying host operating system. It’s also called Hosted Hypervisor.

2. What is virtualization?
- Virtualization is the process of creating a software-based, virtual version of something(compute storage, servers, application, etc.). 
- These virtual versions or environments are created from a single physical hardware system. 
- Virtualization lets you split one system into many different sections which act like separate, distinct individual systems. 
- A software called Hypervisor makes this kind of splitting possible. The virtual environment created by the hypervisor is called Virtual Machine.

3. What is containerization?
- Usually, in the software development process, code developed on one machine might not work perfectly fine on any other machine because of the dependencies. 
- This problem was solved by the containerization concept. 
- So basically, an application that is being developed and deployed is bundled and wrapped together with all its configuration files and dependencies. 
- This bundle is called a container. 
- Now when you wish to run the application on another system, the container is deployed which will give a bug-free environment as all the dependencies and libraries are wrapped 
  together. Most famous containerization environments are Docker and Kubernetes.

4. Difference between virtualization and containerization?
- The question could either be differences between virtualization and containerization or differences between virtual machines and containers. 
- Containers provide an isolated environment for running the application. 
- The entire user space is explicitly dedicated to the application. 
- Any changes made inside the container is never reflected on the host or even other containers running on the same host. 
- Containers are an abstraction of the application layer. Each container is a different application.
- Whereas in Virtualization, hypervisors provide an entire virtual machine to the guest(including Kernal). 
- Virtual machines are an abstraction of the hardware layer. Each VM is a physical machine.

5. What is Docker?
- Docker is a containerization platform which packages your application and all its dependencies together in the form of containers so as to ensure that your application works
  seamlessly in any environment, be it development, test or production. 
- Docker containers, wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, system libraries, etc. 
- It wraps basically anything that can be installed on a server. This guarantees that the software will always run the same, regardless of its environment.

6. What is a Docker Container?
- Docker containers include the application and all of its dependencies. 
- It shares the kernel with other containers, running as isolated processes in user space on the host operating system. 
- Docker containers are not tied to any specific infrastructure: they run on any computer, on any infrastructure, and in any cloud. 
- Docker containers are basically runtime instances of Docker images.

7. What are Docker Images?
- When you mention Docker images, your very next question will be “what are Docker images”.
- Docker image is the source of Docker container. In other words, Docker images are used to create containers. 
- When a user runs a Docker image, an instance of a container is created. These docker images can be deployed to any Docker environment.

8. What is Docker Hub?
- Docker images create docker containers. There has to be a registry where these docker images live. 
- This registry is Docker Hub. Users can pick up images from Docker Hub and use them to create customized images and containers. Currently,
  the Docker Hub is the world’s largest public repository of image containers.

9. Explain Docker Architecture?
- Docker Architecture consists of a Docker Engine which is a client-server application with three major components:
- A server which is a type of long-running program called a daemon process (the docker command).
- A REST API which specifies interfaces that programs can use to talk to the daemon and instruct it what to do.
- A command line interface (CLI) client (the docker command).
- The CLI uses the Docker REST API to control or interact with the Docker daemon through scripting or direct CLI commands. 
- Many other Docker applications use the underlying API and CLI.

10. In Docker, what’s the difference between CMD and ENTRYPOINT? Which creates a layer?
A - CMD: Provides default arguments to ENTRYPOINT.
  - ENTRYPOINT: Defines the main command.

  - Both create image layers, but ENTRYPOINT is the one that defines the container’s main behavior.

 11. Tell us something about Docker Compose.
  - Docker Compose is a YAML file which contains details about the services, networks, and volumes for setting up the Docker application. 
  - So, you can use Docker Compose to create separate containers, host them and get them to communicate with each other. 
  - Each container will expose a port for communicating with other containers.

  12. Docker Compose is a tool for defining and managing multi-container Docker applications. 
  - It uses a YAML file to configure the application's services, networks, and volumes. With a single command, you can create and start all the services defined in the Compose file.
  - Docker Compose simplifies the process of managing complex applications, making it easier to develop, test, and deploy them. 
  - A docker-compose.yml file defines the services that make up your application. 
  - For example, a web application might have a service for the web server, a service for the database, and a service for a caching server. 
  - The Compose file specifies the Docker images to use for each service, as well as any dependencies between them.  
  - To start the application, you can use the command docker compose up. This command creates and starts all the services defined in the Compose file. 
  - Docker Compose also provides commands for stopping, restarting, and scaling the application.

  - web application can have:
  - one service for the web server (to handle user requests),
  - one service for the database (to store and retrieve data),
  - and one service for caching (to make data access faster).
  - Each service does a specific job to keep the app working smoothly.

  13. What is Docker Swarm?
  - Docker Swarm is native clustering for Docker. 
  - It turns a pool of Docker hosts into a single, virtual Docker host. 
  - Docker Swarm serves the standard Docker API, any tool that already communicates with a Docker daemon can use Swarm to transparently scale to multiple hosts.

  14. What is a Docker Namespace?
  - A namespace is one of the Linux features and an important concept of containers.
  - Namespace adds a layer of isolation in containers. 
  - Docker provides various namespaces in order to stay portable and not affect the underlying host system. 
  - Few namespace types supported by Docker – PID, Mount, IPC, User, Network

  15. What is the lifecycle of a Docker Container?
  - Docker containers have the following lifecycle:
  - Create a container
  - Run the container
  - Pause the container(optional)
  - Un-pause the container(optional)
  - Start the container
  - Stop the container
  - Restart the container
  - Kill the container
  - Destroy the container

 16.What is Docker Machine?
 - Docker machine is a tool that lets you install Docker Engine on virtual hosts.
 - These hosts can now be managed using the docker-machine commands. 
 - Docker machine also lets you provision Docker Swarm Clusters.

17. How to check for Docker Client and Docker Server version?
 - The following command gives you information about Docker Client and Server versions:
 - $ docker version

18. How do you get the number of containers running, paused and stopped?
 - You can use the following command to get detailed information about the docker installed on your system.

 - $ docker info

 - You can get the number of containers running, paused, stopped, the number of images and a lot more.
 - If you vaguely remember the command and you’d like to confirm it, how will you get help on that particular command?
 - The following command is very useful as it gives you help on how to use a command, the syntax, etc.

 - $ docker --help

 - The above command lists all Docker commands. If you need help with one specific command, you can use the following syntax:

 - $ docker <command> --help

19. How to login into docker repository?
 - You can use the following command to login into hub.docker.com:

 - $ docker login

 - You’ll be prompted for your username and password, insert those and congratulations, you’re logged in.

 - If you wish to use a base image and make modifications or personalize it, how do you do that?
 - You pull an image from docker hub onto your local system
 - It’s one simple command to pull an image from docker hub:
 - $ docker pull <image_name>

20. How do you create a docker container from an image?
 - Pull an image from docker repository with the above command and run it to create a container. Use the following command:
 - $ docker run -it -d <image_name>
 - Most probably the next question would be, what does the ‘-d’ flag mean in the command?
 - d means the container needs to start in the detached mode.  

 - The following command lists down all the running containers:

 - $ docker ps

 21. Suppose you have 3 containers running and out of these, you wish to access one of them. How do you access a running container?
 - The following command lets us access a running container:
 - $ docker exec -it <container id> bash
 - The exec command lets you get inside a container and work with it.

 22. How to start, stop and kill a container?
 - The following command is used to start a docker container:
 - $ docker start <container_id>
 - and the following for stopping a running container:
 - $ docker stop <container_id>
 - kill a container with the following command:
 - $ docker kill <container_id>

 - Once you’ve worked with an image, how do you push it to docker hub?
 - $ docker push <username/image name>

23. How to delete a stopped container?
- Use the following command to delete a stopped container:
- $ docker rm <container id>

24. How to delete an image from the local storage system?
- The following command lets you delete an image from the local system:
- $ docker rmi <image-id>

25. How to build a Dockerfile? 
- Once you’ve written a Dockerfile, you need to build it to create an image with those specifications. Use the following command to build a Dockerfile:
- $ docker build <path to docker file>
- The next question would be when do you use “.dockerfile_name” and when to use the entire path?
- Use “.dockerfile_name” when the dockerfile exits in the same file directory and you use the entire path if it lives somewhere else.

26. What is an image, how does docker container helps an image 
    - What is a Docker Image?
   - A Docker image is a read-only template that contains the application code, runtime, libraries, and dependencies required to run a container.

   - Think of it as a blueprint or snapshot.

   - Created using a Dockerfile.

27. How Docker Container Helps an Image
   - A container is a running instance of an image.

   - Docker takes the image and adds a writable layer on top to create a container.

   - The image stays unchanged, while the container can run and modify data during execution.

   - Flow:
   - Create Dockerfile →

   - Build image using docker build →

   - Run container using docker run (image is the base)

   - Example:

   - bash
   - docker build -t myapp .
   - docker run myapp

  28. what is a container
   - A container is a lightweight, standalone, executable package that includes everything needed to run a piece of software—code, runtime, system tools, libraries, and settings.
   - What: Isolated environment for running applications.
   - Why: To ensure consistent execution across environments (dev → prod).
   - When: Used in CI/CD, microservices, and scalable app deployments.
   - Where: Runs on container engines like Docker or Kubernetes.
   - Example: A Python app in a Docker container will run the same on any system, regardless of host OS differences.

   - Docker commands all need every argument description as well
   - Here is a list of commonly used Docker commands, each with all key arguments and their descriptions:

  - 1. docker run
  - Run a container from an image.

  - bash
  - docker run [OPTIONS] IMAGE [COMMAND] [ARG...]

  - Arguments:

  -d : Run in detached mode (in background).

  -it : Interactive terminal.

  --name : Assign name to container.

  -p : Port mapping (host:container, e.g. -p 8080:80).

  -v : Mount volume (host:container, e.g. -v /data:/app/data).

  --rm : Remove container after exit.

  --env or -e : Set environment variables.

  --network : Connect to a specific network.

  --restart : Restart policy (e.g., no, on-failure, always).

  --entrypoint : Overwrite default entrypoint.

- 2. docker build
- Build an image from a Dockerfile.

- bash
- docker build [OPTIONS] PATH | URL | -
- Arguments:

-t : Tag image (e.g., -t myimage:latest).

-f : Specify Dockerfile (e.g., -f Dockerfile.dev).

--no-cache : Do not use cache when building.

--build-arg : Pass build arguments (e.g., --build-arg NODE_ENV=prod).

--platform : Set target platform (e.g., linux/amd64).

- 3. docker ps
- List running containers.

- bash
- docker ps [OPTIONS]
- Arguments:

-a : Show all containers (default shows only running).

-q : Show only container IDs.

--filter : Filter output (e.g., --filter "status=exited").

--format : Pretty-print using Go templates.

- 4. docker exec
- Run command inside running container.

- bash
- Copy
- docker exec [OPTIONS] CONTAINER COMMAND [ARG...]
- Arguments:

-it : Interactive terminal.

-u : Run as specific user.

--env : Set environment variables inside the exec session.

- 5. docker logs
- Fetch logs from container.

- bash
- docker logs [OPTIONS] CONTAINER
- Arguments:

- -f : Follow log output.

- --tail : Number of lines to show from the end (e.g., --tail 100).

- -t : Show timestamps.

- 6. docker stop
- Stop running container.

- bash
- docker stop [OPTIONS] CONTAINER [CONTAINER...]
- Arguments:

- -t : Timeout before killing container (default: 10 seconds).

- 7. docker rm
- Remove container.

- docker rm [OPTIONS] CONTAINER [CONTAINER...]
- Arguments:

- -f : Force removal of running container.

- -v : Remove volumes associated with container.

- 8. docker rmi
- Remove image.

- bash
- docker rmi [OPTIONS] IMAGE [IMAGE...]
- Arguments:

- -f : Force removal.

- --no-prune : Do not delete untagged parents.

- 9. docker images
- List all images.

- bash
- docker images [OPTIONS]
- Arguments:

- -a : Show all images (default hides intermediate).

- --filter : Filter output (e.g., dangling=true).

- --format : Custom output format.

- 10. docker pull
- Download image from Docker Hub or registry.

- bash
- docker pull [OPTIONS] NAME[:TAG|@DIGEST]
- Arguments:

- --platform : Target OS/architecture (e.g., linux/arm64).

- 11. docker push
- Upload image to registry.

- bash
- docker push [OPTIONS] NAME[:TAG]
- Arguments:

- --disable-content-trust : Skip content verification (default true).

- 12. docker network
- Manage Docker networks.

- bash
- docker network COMMAND
- Subcommands:

- create, rm, ls, inspect, connect, disconnect

- Example:

- bash
- docker network create --driver bridge mynet
- --driver : Network driver (bridge, overlay, etc.).

- --subnet, --gateway : Set subnet/gateway.
