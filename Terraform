Terraform Commands

- Initialization
- terraform init
‚Üí Initializes the working directory with Terraform configuration.

- Validation & Formatting
- terraform validate
‚Üí Validates the configuration files.

- terraform fmt
‚Üí Formats configuration files to canonical style.

- Planning
- terraform plan
‚Üí Shows what Terraform will do without applying changes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. What:
- Deploying infrastructure across multiple regions and subscriptions (AWS accounts or Azure subscriptions) ensures high availability, disaster recovery, and better 
cost/governance separation.

2. How:
- Use Terraform or Pulumi to define infrastructure as code.

- Use provider aliases to handle different regions or subscriptions within the same configuration.

- Maintain separate state files per region/subscription for isolation and parallel deployment.

- Use local execution, Jenkins, or AWS CodePipeline to run Terraform.

- Authenticate using assume role, AWS CLI profiles, or Azure service principals.

- Use terraform workspace or naming conventions to distinguish between environments.

- Store secrets securely using AWS Secrets Manager, Azure Key Vault, or .tfvars files encrypted with Vault.

3. When to Use:
- You need disaster recovery setups.

- You have teams operating in different regions or accounts.

- You want to isolate environments or departments (e.g., dev, staging, prod).

4. Where:
- Across AWS regions like us-east-1, ap-south-1.

- Across Azure subscriptions for different business units or billing scopes.

- Example (AWS - Terraform Multi-Region & Multi-Account):

provider "aws" {
  alias  = "us_east"
  region = "us-east-1"
  profile = "dev-account"
}

provider "aws" {
  alias  = "ap_south"
  region = "ap-south-1"
  profile = "prod-account"
}

module "infra_us" {
  source    = "./modules/vpc"
  providers = { aws = aws.us_east }
}

module "infra_india" {
  source    = "./modules/vpc"
  providers = { aws = aws.ap_south }
}

Execution Commands:
export AWS_PROFILE=dev-account
terraform init
terraform plan
terraform apply
Then repeat with another profile or region.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Terraform Script to Create 5 IAM Users

variable "iam_users" {
  default = ["user1", "user2", "user3", "user4", "user5"]
}

resource "aws_iam_user" "users" {
  for_each = toset(var.iam_users)
  name     = each.value
}

Save as main.tf
- terraform init
- terraform apply

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - Descirbe a scenario where you might need to use terraform workspaces and how would you structure your project to take advantage of them..?
A - Terraform Workspaces can be used when you want to use single configuration file for multiple environments(Dev, Prod).
  - So thats where we can make use of workspaces.
  - So lets say we have a config fileand want to execute that same config file for my different environments.
  - So I want one single file and executes it in the environments thats where we can make use of workspaces.
  - So for each environment we can use workspace which is nothing but a copy of this config file.
  - So when i execute the config file in the respective workspaces it will get executed in the respective environment
  - So this is where we can make use of workspaces.

Example - 
# Step 1: Initialize Terraform
terraform init

# Step 2: Create a new workspace
terraform workspace new dev

# Step 3: Switch to another workspace
terraform workspace select prod

# Step 4: List all workspaces
terraform workspace list

# Step 5: Apply configuration in a workspace
terraform apply

Each workspace keeps its own state file, e.g., .terraform/ contains terraform.tfstate.d/<workspace_name>/terraform.tfstate.



Here's a **Terraform workspace example**:

### üß© What is a Workspace?
A **workspace** in Terraform allows you to manage **multiple states** (like dev, staging, prod) using the **same code base**.

---

### ‚úÖ Example: Creating and Using Workspaces

```bash
# Step 1: Initialize Terraform
terraform init

# Step 2: Create a new workspace
terraform workspace new dev

# Step 3: Switch to another workspace
terraform workspace select prod

# Step 4: List all workspaces
terraform workspace list

# Step 5: Apply configuration in a workspace
terraform apply

Each workspace keeps its **own state file**, e.g., `.terraform/` contains `terraform.tfstate.d/<workspace_name>/terraform.tfstate`.

üìÅ Use Case:
Deploying **identical infrastructure** in different environments:
- `dev` workspace ‚Üí creates `dev` resources
- `prod` workspace ‚Üí creates `prod` resources


