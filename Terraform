- Terraform is preferred for modular and reusable infrastructure as code.

1. Providers
What: Plugin to interact with cloud or services (e.g., AWS, Azure).
Why: Tells Terraform how to manage resources.
Example: provider "aws" { region = "us-east-1" }

2. Resources
What: Block that defines infrastructure (e.g., EC2, S3).
Why: Actual infrastructure components you manage.
Example: resource "aws_instance" "web" { ... }

3. Modules
What: Reusable blocks of Terraform config.
Why: Promotes DRY and organized code.
Example: A module to create a VPC reused in many projects.

4. Variables
What: Inputs to parameterize configs.
Why: Reuse and flexibility.
Example: variable "instance_type" { default = "t2.micro" }

5. Outputs
What: Return values from Terraform.
Why: Share info between modules or after apply.
Example: output "instance_ip" { value = aws_instance.web.public_ip }

6. State
What: Tracks real infrastructure.
Why: Syncs Terraform config and actual infra.
Example: Stored in terraform.tfstate

7. Data Sources
What: Read-only data from existing resources.
Why: Reference infra not managed by Terraform.
Example: data "aws_ami" "ubuntu" { ... }

8. Backend
What: Where state file is stored (local, S3, etc.).
Why: Collaboration and locking.
Example: backend "s3" { ... }

9. Workspaces
What: Isolated state files within a project.
Why: Support multiple environments.
Example: terraform workspace new dev

10. Terraform CLI Commands
What: Commands like init, plan, apply.
Why: Control Terraform lifecycle.
Example: terraform apply

11. Expressions & Functions
What: Logic in HCL (interpolation, conditions).
Why: Dynamic and intelligent config.
Example: count = var.create ? 1 : 0

- Expressions & Functions in Terraform (HCL)
‚úÖ What
- Expressions and functions in HCL (HashiCorp Configuration Language) allow you to write dynamic, conditional, and reusable configurations.

- Expressions = Logic statements used to compute values (e.g., var.env == "prod" ? 3 : 1)

- Functions = Built-in helpers that perform operations (e.g., length(), lookup(), join())

‚úÖ Why
- They help:

- Reduce hardcoding

- Make config dynamic based on variables or conditions

- Control resource count, naming, tags, paths, etc.

‚úÖ Key Examples and Use Cases
- Interpolation:
- "ami-${var.env}"
- ‚Üí Embeds a variable inside a string.

- Conditionals:
- count = var.create ? 1 : 0
- ‚Üí Creates a resource only if var.create is true (ternary expression).

- Logical Expressions:
- var.env == "prod"
- ‚Üí Used to evaluate conditions in expressions.

-mFor Loop:
- for s in var.subnets : "${s}-tag"
- ‚Üí Dynamically generates a list by appending -tag to each subnet.

- Splat Operator:
- aws_instance.example[*].id
- ‚Üí Extracts all IDs from a list of EC2 instances.

‚úÖ Functions Overview
length():
Returns the number of elements in a list or map.
Example: length(var.subnets)

join():
Joins elements of a list into a single string, separated by a delimiter.
Example: join(",", var.subnets)

split():
Splits a string into a list based on a delimiter.
Example: split(",", var.tags)

lookup():
Retrieves a value from a map based on a key, with an optional default.
Example: lookup(var.ami_map, var.region, "default-ami")

element():
Fetches an element from a list by index.
Example: element(var.subnets, 1)

file():
Reads the contents of a local file into the Terraform configuration.
Example: file("user_data.sh")

12. Lifecycle Rules
What: Customize resource creation/deletion behavior.
Why: Prevents unintended changes.
Example:lifecycle {
  prevent_destroy = true
}

13. Provisioners
What: Run scripts on a resource (e.g., remote exec).
Why: Perform bootstrapping actions.
Note: Use as last resort.
Example:
provisioner "remote-exec" {
  inline = ["sudo apt update"]
}

14. Meta-Arguments
What: Arguments like count, for_each, depends_on.
Why: Control behavior of resources.
Example:
count = 3

15. Dynamic Blocks
What: Generate repeated nested blocks programmatically.
Why: Cleaner code for repeated structures.
Example:
dynamic "ingress" {
  for_each = var.ingress_rules
  content {
    from_port = ingress.value.from
    to_port   = ingress.value.to
  }
}

16. Remote State Data Source
What: Access outputs from another state file.
Why: Share data across modules/projects.
Example:


Q - How have you used Terraform?
A - I used Terraform to automate EKS provisioning, create EC2 instances, set up IAM roles, and configure security groups and S3 buckets.

Q - How do you manage IAM access with Terraform?
A - I define IAM roles, users, and policies as Terraform resources. I assign required permissions using policy JSONs and bind them to users or groups

------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Terraform Commands

- Initialization
- terraform init
‚Üí Initializes the working directory with Terraform configuration.

- Validation & Formatting
- terraform validate
‚Üí Validates the configuration files.

- terraform fmt
‚Üí Formats configuration files to canonical style.

- Planning
- terraform plan
‚Üí Shows what Terraform will do without applying changes.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. What:
- Deploying infrastructure across multiple regions and subscriptions (AWS accounts or Azure subscriptions) ensures high availability, disaster recovery, and better 
cost/governance separation.

2. How:
- Use Terraform or Pulumi to define infrastructure as code.
- Use provider aliases to handle different regions or subscriptions within the same configuration.
- Maintain separate state files per region/subscription for isolation and parallel deployment.
- Use local execution, Jenkins, or AWS CodePipeline to run Terraform.
- Authenticate using assume role, AWS CLI profiles, or Azure service principals.
- Use terraform workspace or naming conventions to distinguish between environments.
- Store secrets securely using AWS Secrets Manager, Azure Key Vault, or .tfvars files encrypted with Vault.

3. When to Use:
- You need disaster recovery setups.
- You have teams operating in different regions or accounts.
- You want to isolate environments or departments (e.g., dev, staging, prod).

4. Where:
- Across AWS regions like us-east-1, ap-south-1.
- Across Azure subscriptions for different business units or billing scopes.
- Example (AWS - Terraform Multi-Region & Multi-Account):
provider "aws" {
  alias  = "us_east"
  region = "us-east-1"
  profile = "dev-account"
}

provider "aws" {
  alias  = "ap_south"
  region = "ap-south-1"
  profile = "prod-account"
}

module "infra_us" {
  source    = "./modules/vpc"
  providers = { aws = aws.us_east }
}

module "infra_india" {
  source    = "./modules/vpc"
  providers = { aws = aws.ap_south }
}

Execution Commands:
export AWS_PROFILE=dev-account
terraform init
terraform plan
terraform apply
Then repeat with another profile or region.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Terraform Script to Create 5 IAM Users

variable "iam_users" {
  default = ["user1", "user2", "user3", "user4", "user5"]
}

resource "aws_iam_user" "users" {
  for_each = toset(var.iam_users)
  name     = each.value
}

Save as main.tf
- terraform init
- terraform apply

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - Descirbe a scenario where you might need to use terraform workspaces and how would you structure your project to take advantage of them..?
A - Terraform Workspaces can be used when you want to use single configuration file for multiple environments(Dev, Prod).
  - So thats where we can make use of workspaces.
  - So lets say we have a config fileand want to execute that same config file for my different environments.
  - So I want one single file and executes it in the environments thats where we can make use of workspaces.
  - So for each environment we can use workspace which is nothing but a copy of this config file.
  - So when i execute the config file in the respective workspaces it will get executed in the respective environment
  - So this is where we can make use of workspaces.

Example - 
# Step 1: Initialize Terraform
terraform init

# Step 2: Create a new workspace
terraform workspace new dev

# Step 3: Switch to another workspace
terraform workspace select prod

# Step 4: List all workspaces
terraform workspace list

# Step 5: Apply configuration in a workspace
terraform apply

Each workspace keeps its own state file, e.g., .terraform/ contains terraform.tfstate.d/<workspace_name>/terraform.tfstate.

Here's a **Terraform workspace example**:

### üß© What is a Workspace?
A **workspace** in Terraform allows you to manage **multiple states** (like dev, staging, prod) using the **same code base**.

### ‚úÖ Example: Creating and Using Workspaces

```bash
# Step 1: Initialize Terraform
terraform init

# Step 2: Create a new workspace
terraform workspace new dev

# Step 3: Switch to another workspace
terraform workspace select prod

# Step 4: List all workspaces
terraform workspace list

# Step 5: Apply configuration in a workspace
terraform apply

Each workspace keeps its **own state file**, e.g., `.terraform/` contains `terraform.tfstate.d/<workspace_name>/terraform.tfstate`.

üìÅ Use Case:
Deploying **identical infrastructure** in different environments:
- `dev` workspace ‚Üí creates `dev` resources
- `prod` workspace ‚Üí creates `prod` resources

Example of using workspaces with environment-specific variables in Terraform

main.tf
variables.tf
env/
‚îú‚îÄ‚îÄ dev.tfvars
‚îú‚îÄ‚îÄ prod.tfvars


variable "instance_type" {
  description = "EC2 instance type"
  type        = string
}

resource "aws_instance" "example" {
  ami           = "ami-0abcdef1234567890"
  instance_type = var.instance_type
}

variables.tf
variable "instance_type" {
  type        = string
  description = "Type of instance"
}

env/dev.tfvars
instance_type = "t2.micro"

env/prod.tfvars
instance_type = "t3.medium"

- Workspace Usage
# Create and switch to workspace
terraform workspace new dev

# Apply using dev variables
terraform apply -var-file="env/dev.tfvars"

# Switch to prod workspace
terraform workspace new prod

# Apply using prod variables
terraform apply -var-file="env/prod.tfvars"

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - When you create an environment using terraform? What are all the components which have creating using terraform ?
- Some of the components using terraform are
- Resource Group - Storage Account.
- Network Security - Application Gateway.
- Vms using Azure Providers.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How to do changes in the configuration of already created resources using terraform?
- Terraform import

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - When the terraform runs state file gets created..? What do you do with state file? Where you can store it or find it..?
A Terraform maintains a state file that maps the current status of the infrastructure with the configuration file so if the state file is commonly stored either on a local 
machine or a remote storage location like storage account in azure or s3 bucket in aws  we can also store in terraform cloud by default its stored in local machine and
it is named as terraform.pf file that state file can include sensistive information so it is always recommended that it is always stored on the media that is encrypeted 
at the result.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - Lets say you some how loose the state file in terraform so how to resolve the issue..?
  - As 

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How will you control and handle rollbacks when something goes wrong?
  - I need to recommit the previous code version to be the new and current version in my VCS. 
  - This would trigger as terraform run, which would be responsible for running the old code. 
  - As Terraform is more declarative, I will make sure all things in the code roll back to the old code. 
  - I would use the State Rollback Feature of Terraform Enterprise to roll back to the latest state if the state file got corrupted.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How will you make an object of one module available for the other module at a high level?
  - Ab output variable is defined in resource configuration.
  - Declare the output variable of module_A.
  - Create a file variable.tf for module B.
  - Establish the input variable inside this file having the same name as the key defined in module_B.
  - Replicate the process for making variable available to other modules

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How will you upgrade plugins on Terraform?
  - Run ‚Äòterraform init‚Äô with ‚Äò-upgrade‚Äô option. 
  - This command rechecks the releases.hashicorp.com to find new acceptable provider versions. 
  - It also downloads available provider versions. ‚Äú.terraform/plugins/<OS>_<ARCH>‚Äù is the automatic downloads directory.
  - 
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - You need to provide/provision and configure infrastructure across multiple environments using terraform. How would you ensure code is reusable and prevent duplication..?
A - Use terraform modules for reusable code.
  - Organize modules for network compute and storage components.
  - Use input variables to customize configurations for each environment.
  - Store state files securely(E.g. s3 with versioning)
  - Implement workspaces for managing multiple environments like dev, staging and prod.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How do you create 5 IAM users in Terraform?

resource "aws_iam_user" "example" {
  count = 5
  name  = "user-${count.index + 1}"
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How do you switch between Terraform workspaces?
A - Use the command:

- bash
- terraform workspace select uat

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - What are the recommended practices for securely storing Terraform state files, and how do different backends impact infrastructure management?

- Recommended Practices for Securely Storing Terraform State Files:

- Use Remote Backends: Avoid local state files. Use remote backends like AWS S3, Azure Blob, or Terraform Cloud.

- Enable Encryption: Ensure state files are encrypted at rest and in transit.

- Use State Locking: Prevent concurrent modifications using backends that support locking (e.g., S3 with DynamoDB, Terraform Cloud).

- Access Control: Restrict access using IAM policies or role-based access.

- Versioning: Enable versioning (e.g., in S3) to recover from accidental changes.

- Secrets Management: Don't store secrets in state files. Use tools like Vault or environment variables.

- Impact of Different Backends on Infrastructure Management:

- Local: Simple but risky; lacks security, collaboration, and state locking.

- S3 + DynamoDB: Good for teams; supports locking and versioning.

- Terraform Cloud: Offers remote runs, locking, collaboration, and built-in security.

- Azure Blob / GCS: Similar to S3, supports team access and versioning.

- Summary: Choose a backend that supports encryption, locking, and collaboration to ensure safe and efficient infrastructure management.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - How can I set up encryption for my S3-backed Terraform state?

- To set up encryption for your S3-backed Terraform state, follow these steps:

1. Enable Server-Side Encryption on S3 Bucket
- Terraform state files stored in S3 can be encrypted using:

SSE-S3 (default AWS-managed keys)

SSE-KMS (your own KMS keys ‚Äì recommended for more control)

Using SSE-KMS (Recommended):
Create an S3 bucket and specify KMS encryption:

hcl
Copy
Edit
resource "aws_kms_key" "terraform_state" {
  description             = "KMS key for Terraform state encryption"
  deletion_window_in_days = 10
  enable_key_rotation     = true
}

resource "aws_s3_bucket" "tf_state" {
  bucket = "my-terraform-state-bucket"

  server_side_encryption_configuration {
    rule {
      apply_server_side_encryption_by_default {
        sse_algorithm     = "aws:kms"
        kms_master_key_id = aws_kms_key.terraform_state.arn
      }
    }
  }

  versioning {
    enabled = true
  }
}
2. Configure Backend in main.tf
hcl
Copy
Edit
terraform {
  backend "s3" {
    bucket         = "my-terraform-state-bucket"
    key            = "env/dev/terraform.tfstate"
    region         = "us-east-1"
    encrypt        = true  # Ensures SSE is enabled
    dynamodb_table = "terraform-lock-table"  # For state locking
  }
}
3. IAM Permissions
Ensure Terraform has permissions:

To access the S3 bucket

To use the KMS key

Example IAM policy:

json
Copy
Edit
{
  "Effect": "Allow",
  "Action": [
    "s3:*",
    "kms:Decrypt",
    "kms:Encrypt",
    "kms:GenerateDataKey"
  ],
  "Resource": [
    "arn:aws:s3:::my-terraform-state-bucket/*",
    "arn:aws:kms:us-east-1:123456789012:key/your-kms-key-id"
  ]
}
4. Initialize Terraform
After backend config is set:

bash
Copy
Edit
terraform init
Note: encrypt = true in backend config ensures SSE-S3, but to use SSE-KMS, configure the bucket directly as shown above.
