- We need to build an executable file out of this git.
- This is called CI.
- The famous tool we use is Jenkins.
- We use jenkins with Maven to build to the code.
- We take the raw code from the developer we check whether unit test cases are running or not or is getting compiled or not.
- All these things we check we integrate the code.
- Once the code is ready we need to host it.
- We need to deploy the code we need to setup and infrastructure.
- Take a machine install Java, install Tomcat and then dependencies copy the code and then deploy the code.
- We need to setup and infrastructure.
- We need CM tools to make changesto our infrastructure that is called CM.
- Once the environment is setup we use containers to host the applications like .war files or tomcat or app we use containers.
- We are packaging together and runnng it as a container.
- We are using Docker and container to manage the apps.

------------------------------------------------------------------------------------------------------------------------------------

- What are shared libraries in Jenkins?
- Shared libraries in Jenkins enable the reuse of scripts, steps, and variables across multiple Pipeline jobs.
- Candidates should explain how they can define these libraries once and then reference them in Jenkinsfiles, which reduces code duplication.
- Look for explanations of how to set up a shared library by adding it to the Jenkins configuration and referencing it in a Pipeline script using the @Library annotation or
  the libraries section in a Declarative Pipeline.
------------------------------------------------------------------------------------------------------------------------------------

- How would you implement blue/green deployments using Jenkins?
- Blue/green deployments help reduce downtime and risk by running two identical environments ("blue" and "green") and switching traffic from one to the other after new changes 
are tested and ready.

- Developers need to deploy new versions to the inactive environment, perform health checks and tests, and then switch the traffic (often via load balancers). 
- Skilled candidates would also mention rollback strategies they’d set up to prevent issues.


- How do you integrate static code analysis tools into a Jenkins pipeline?
- Static code analysis tools, such as SonarQube, Checkstyle, or FindBugs, help automatically analyze source code for potential errors, code smells, or security vulnerabilities.
- To integrate static code analysis tools into a Jenkins pipeline, developers use plugins for each tool. For this, they would need to:
- Install the plugin through the Jenkins management interface.
- In the pipeline configuration (either for a Declarative or Scripted Pipeline), add steps to execute the static code analysis during the build process.
- Configure the pipeline to analyze the results, potentially fail the build on violations, and display the results directly within the Jenkins UI for review.
- This automates code quality checks and ensures that code standards are consistent.

- How can Jenkins be used for monitoring applications?
- Jenkins is ideal for monitoring build statuses and performance metrics, plus, it integrates well with external monitoring tools.
- Candidates might mention using Jenkins plugins to push build logs and metrics to centralized logging and monitoring tools like ELK (Elasticsearch, Logstash, Kibana) or Splunk.
- They would set up notifications (for example, via email or Slack) based on build outcomes or metrics thresholds and might also use Jenkins Pipeline steps to embed monitoring 
  and logging checks directly within CI/CD processes.

Jenkins build agents are maintained to ensure scalability, reliability, and efficiency in CI/CD pipelines. Here's a breakdown:

- How Jenkins Build Agents Are Maintained
1. Provisioning	Agents can be static (manually installed) or dynamic (via Docker, Kubernetes, EC2).
2. Communication	Maintained using JNLP, SSH, or WebSocket.
3. Updates	Periodic updates to the Jenkins agent binaries, plugins, and Java runtime.
4. Scaling	Auto-scaled using cloud plugins (e.g., EC2, Kubernetes, Docker).
5. Monitoring	Use Jenkins UI, Prometheus metrics, or logs for health monitoring.
6. Cleanup	Clean workspaces post-build using scripts or built-in options.
7. Security	Control access via credentials, firewall rules, and role-based access.
8. Recovery	Use scripts or infrastructure tools (Ansible, Terraform) to auto-recreate failed agents.

- Examples of Maintenance Activities:
- Restart unresponsive agents via script or Jenkins UI.
- Auto-remove idle agents after timeout.
- Rotate credentials/tokens used by agents.
- Patch/update agent OS or Docker images.

1. Jenkins Agent in Docker (Dynamic Provisioning)

# Run Jenkins agent using Docker
docker run -d \
  --name jenkins-agent-01 \
  -e JENKINS_URL=http://<jenkins-master>:8080 \
  -e JENKINS_AGENT_SECRET=<agent-secret> \
  -e JENKINS_AGENT_NAME=agent-01 \
  jenkins/inbound-agent
Use --restart=always for auto-restart on failure.

2. Jenkins Agent on Kubernetes (yaml template)
# kubernetes-agent.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
  name: jenkins-agent
spec:
  containers:
  - name: jenkins-agent
    image: jenkins/inbound-agent
    env:
    - name: JENKINS_URL
      value: "http://jenkins-master:8080"
    - name: JENKINS_AGENT_NAME
      value: "k8s-agent"
    - name: JENKINS_SECRET
      valueFrom:
        secretKeyRef:
          name: jenkins-agent-secret
          key: secret

3. Agent Auto-Restart Script (Linux Cron Job)
#!/bin/bash
# Check and restart agent if not running
if ! pgrep -f "jenkins-agent.jar"; then
  echo "Jenkins agent down, restarting..."
  nohup java -jar /opt/jenkins-agent/agent.jar -jnlpUrl <JNLP_URL> -secret <SECRET> &
fi
Add to cron: */5 * * * * /opt/scripts/check_agent.sh

4. Auto Clean Jenkins Workspace (Post-build)
#!/bin/bash
# Clean all workspaces older than 7 days
find /var/lib/jenkins/workspace/* -mtime +7 -exec rm -rf {} \;

Add as a periodic Jenkins job or post-build step.

5. Secure Agent SSH Setup (Ansible snippet)
- name: Setup Jenkins Agent
  hosts: jenkins_agents
  become: yes
  tasks:
    - name: Create jenkins user
      user:
        name: jenkins
        shell: /bin/bash

    - name: Copy public SSH key
      authorized_key:
        user: jenkins
        key: "{{ lookup('file', '/path/to/jenkins_master_id_rsa.pub') }}"


1. How do you install Jenkins on a Linux server?
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb https://pkg.jenkins.io/debian binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update && sudo apt install jenkins openjdk-11-jdk -y
sudo systemctl start jenkins && sudo systemctl enable jenkins

2. How do you create a basic Jenkins job?
- Go to Jenkins dashboard → “New Item”
- Name the job → Choose “Freestyle project”
- Add SCM (e.g., Git), build trigger, and build steps (e.g., shell script)
Save

- 3. What are Jenkins plugins?
- Extensions that add features (e.g., Git integration, Docker support)
- Common plugins:
- Git
- Pipeline
- Blue Ocean
- Slack Notification
- SonarQube Scanner
- Credentials Binding

- 4. What is a Jenkinsfile and what’s its role?
- A text file (in project repo) that defines the CI/CD pipeline as code using Groovy syntax.

- 5. Freestyle vs Pipeline project:
- Feature	Freestyle	Pipeline
- UI Driven	Yes	No
- Code as Pipeline	No	Yes (via Jenkinsfile)
- Flexibility	Limited	High (scripted & declarative)

- 6. Configure email notifications:
- Manage Jenkins → Configure System → SMTP settings
- In job → Post-build Actions → “Editable Email Notification”

- 7. Steps to configure a build job:
- Create new item
- Configure SCM
-  Set build triggers
- Add build steps (shell/script)
- Add post-build actions
- Save and build

- 8. How to secure Jenkins:
- Enable authentication & authorization
- Disable CLI over remoting
- Use HTTPS
- Regular plugin updates
- Limit access with roles (using Role Strategy Plugin)

- 9. What is the Blue Ocean plugin?
- A modern, user-friendly UI for Jenkins pipelines with visual stages and logs.

- 10. How to back up Jenkins data:
- Backup /var/lib/jenkins/ directory (jobs, config, secrets)

- Use plugins like ThinBackup or Ops automation scripts

- 11. Parameterize a Jenkins job:
- Job → “This project is parameterized”
- Add parameters (string, choice, boolean)
- Use $PARAM_NAME in scripts

- 12. Manage credentials in Jenkins:
- Manage Jenkins → Credentials
- Global or folder-level scope

- Use Credentials Binding Plugin to inject into jobs

- 13. Webhook concept & usage:
- A webhook is an HTTP callback triggered by an event.
- GitHub/GitLab → webhook → Jenkins URL (e.g., http://jenkins/job/myjob/build)
- Triggers automatic builds on code changes

- 14. JIRA/SonarQube integration:
- Install relevant plugins
- JIRA: Add site config under “Configure System”
- SonarQube: Add server in Jenkins + use withSonarQubeEnv

15. Purpose of Jenkins REST API:
Interact programmatically (trigger builds, get job status)

Example:

bash
Copy
Edit
curl -X POST http://jenkins/job/test/build --user user:token
16. Troubleshoot a failing Jenkins build:
Check console output logs

Validate Jenkinsfile syntax

Inspect environment variables

Re-run with debug flags

Check slave/agent status

17. Optimize Jenkins performance:
Use distributed builds (agents)

Limit build history/logs

Tune JVM memory

Use Pipeline over Freestyle for heavy jobs

18. Manage state across Pipeline runs:
Use stash/unstash to share artifacts

Save metadata/state in shared storage (S3, DB)

Use build parameters and artifacts

19. IaC strategies to manage Jenkins:
Use Jenkins Configuration as Code (JCasC)

Manage jobs with Job DSL plugin

Version control Jenkinsfiles and configs

20. Jenkins with microservices:
One pipeline per microservice repo

Shared libraries for reuse

Trigger downstream builds via build() or webhook

21. End-to-end automation (CI/CD):
SCM webhook → Jenkins → Build → Test → Security scan → Deploy (Dev → Staging → Prod)

Use Jenkinsfile with stages for each step

22. High availability & disaster recovery:
Active/passive HA (backup Jenkins master)

Externalize state (e.g., NFS, S3, DB)

Periodic backups + use containerized Jenkins

23. Jenkins in DevSecOps:
Integrate tools like SonarQube, Snyk, OWASP ZAP

Add security gates in pipeline

Automate secret scanning, dependency checks

24. Handle build failures:
Use catchError or try-catch

Notify via email/Slack

Retry with retry() block

Archive logs/artifacts for debugging

25. Manage Jenkins dependencies:
Use shared libraries

Use folder structure & inheritance

Externalize configs to Git or Config-as-Code

26. Creating custom Jenkins plugins:
Use Java + Maven

Extend Jenkins core APIs (Builder, Publisher)

Package .hpi and deploy

27. Reusable & maintainable pipelines:
Use Jenkins Shared Libraries

Modular Jenkinsfiles (functions/stages)

Version control pipeline scripts

28. Best practices for credential management:
Never hardcode secrets

Use Credentials Plugin + bind securely

Rotate secrets regularly

Use Vault/Secrets Manager integrations

29. Database migrations in Jenkins CI/CD:
Add DB migration scripts (Liquibase/Flyway) in repo

Jenkins stage → execute migration before/after deploy

Add rollback mechanism

30. Addressing Jenkins/plugin vulnerabilities:
Update Jenkins/plugins regularly

Subscribe to Jenkins security advisories

Audit logs

Use minimal plugin sets


------------------------------------------------------------------------------------------------------------------------------------

Parallel jobs in Jenkins mean multiple jobs or job stages run simultaneously, instead of waiting for each other to complete.

- Where it's used:
- In Pipelines, using parallel block to run stages together.

- In Matrix jobs, testing across multiple environments.

- In multi-configuration projects or distributed builds (e.g., on multiple agents).

- Why it's useful:
- Speeds up builds by doing tasks like testing, linting, or deploying in parallel.

- Efficient resource use across multiple agents.
- Example (Declarative Pipeline):
pipeline {
  agent any
  stages {
    stage('Parallel Tasks') {
      parallel {
        stage('Unit Tests') {
          steps {
            echo 'Running unit tests...'
          }
        }
        stage('Lint Check') {
          steps {
            echo 'Running lint checks...'
          }
        }
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------

- Yes, Jenkins build agents can be deployed as Docker containers. 
- This is a common and scalable method used in modern CI/CD setups.

✅ Why use Docker for Jenkins agents?
- Isolation: Each agent runs in its own container.
- Consistency: Same environment across builds.
- Scalability: Easily spin up/down agents.
- Easy cleanup: Containers can be removed after builds.

- How to deploy?
- Install Docker on the Jenkins host
- Install Docker plugin in Jenkins
- Define Docker agent template in Jenkins (e.g., via Docker plugin or JCasC)
- Use a Docker image for the agent (e.g., jenkins/inbound-agent)
- Configure pipeline to use Docker agent:
pipeline {
  agent {
    docker {
      image 'maven:3.8.4-openjdk-17'
    }
  }
  stages {
    stage('Build') {
      steps {
        sh 'mvn clean install'
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------

Option 1: Docker Compose Setup
docker-compose.yml

version: '3'

services:
  jenkins:
    image: jenkins/jenkins:lts
    user: root
    ports:
      - "8080:8080"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock

volumes:
  jenkins_home:

2. Inside Jenkins:
Install: Docker and Docker Pipeline plugins.

Pipeline example

pipeline {
  agent {
    docker {
      image 'node:18'
    }
  }
  stages {
    stage('Build') {
      steps {
        sh 'node -v'
      }
    }
  }
}

Option 2: Kubernetes Jenkins Agent
1. Prerequisites:
Jenkins on Kubernetes (via Helm)

Kubernetes plugin installed

Jenkins service account with permissions to spawn pods

2. Pod template snippet (in Jenkins > Manage Jenkins > Cloud > Kubernetes):
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  containers:
  - name: jnlp
    image: jenkins/inbound-agent
    args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
  - name: maven
    image: maven:3.8.4-openjdk-17
    command:
    - cat
    tty: true

3. Jenkinsfile:
pipeline {
  agent {
    kubernetes {
      yamlFile 'pod-template.yaml'
    }
  }
  stages {
    stage('Build') {
      steps {
        container('maven') {
          sh 'mvn -v'
        }
      }
    }
  }
}

------------------------------------------------------------------------------------------------------------------------------------

Here’s a Helm + YAML setup to deploy Jenkins with Docker-based agents on Kubernetes:

helm repo add jenkins https://charts.jenkins.io
helm repo update

helm install jenkins jenkins/jenkins \
  --namespace jenkins --create-namespace \
  --set controller.adminUser=admin \
  --set controller.adminPassword=admin \
  --set controller.serviceType=LoadBalancer \
  --set controller.installPlugins[0]=kubernetes:latest \
  --set controller.installPlugins[1]=workflow-aggregator:latest \
  --set controller.installPlugins[2]=docker-workflow:latest \
  --set controller.installPlugins[3]=blueocean:latest \
  --set controller.installPlugins[4]=git:latest

Step 2: Give Jenkins RBAC to Launch Pods
Create jenkins-rbac.yaml:
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: jenkins-role-binding
  namespace: jenkins
subjects:
  - kind: ServiceAccount
    name: jenkins
    namespace: jenkins
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

Apply it
kubectl apply -f jenkins-rbac.yaml

Step 3: Configure Pod Template in Jenkins UI
Jenkins → Manage Jenkins → Configure Clouds → Kubernetes

Paste this YAML in the Pod Template:
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: agent
spec:
  containers:
    - name: jnlp
      image: jenkins/inbound-agent
      args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
    - name: docker
      image: docker:24.0.2
      command:
        - cat
      tty: true

Step 4: Pipeline using Kubernetes Agent
pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: docker
      image: docker:24.0.2
      command:
        - cat
      tty: true
    - name: jnlp
      image: jenkins/inbound-agent
      args: ['$(JENKINS_SECRET)', '$(JENKINS_NAME)']
'''
    }
  }
  stages {
    stage('Run Docker') {
      steps {
        container('docker') {
          sh 'docker --version'
        }
      }
    }
  }
}

