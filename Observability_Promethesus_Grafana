- System(Application + Infrastructure) - App + Networking - Observability.
- State of the application.
- Failures you can understand.
- State of your infrastructure.
- State of Networking.
- Latency.
- Http Traffic.
- Disk utilization of a particular node on my kubernetes cluster over the last 24 hours.
- CPU utilization of a prticular node of the Kubernetes Cluster.
- Memory Utlization.
- Out of 100 Http Requests or out of 100 API calls that are made to the application, How many are successful.What are the number of requests that were failure.
- State of the system like 
i.) Disk Utilization.
ii.) CPU Utlization.
iii.) Memory Utilization.
iv.) Even the number of requests that are failed or passed.
- Observaility doesnt stop there it will also help you understand why is your system in that state, but it will help you understad why its in a particular state.
- Lets say there are 100 http requests, in that why 5 requests are failed what is the reason for it, which part of the applicatin the request is failing what is the reason for it.
- In which part of the application the request is failing you can get the complete information about the faiure and also understand why is there a memory leak by a particular app.
- How to fix 5 http requests that are failing
So you can get complete traces of this http requests, How the http requests has passed through the load balancer when did it reach the front end application then to the backend 
and then to the database, where exactly is the http request failing. once you get the information you can fix the particular request same happens with the memory leak as well
as application is using more amount of memoery using these traces. You can understand wich part of the application is using more extensivley and how to fix it.
- Three Pillars of Obsevability
- Metrics
- Logging
- Traces
- If you have set of metrics, logs and traces for your application and you have the application in place for tracking the metrics logging and tracing uou have set of observaolity
so the metrics part is basically responsible what is the state of the system
- Logging part is responsibele system in the state and traces will help you understand how to fix that particular state,

                                                                    Promethesus Architecture - Retrieval Time
                                                                     /          |            \
                                                            Alert Manager   Push Gateway     Series Database
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q - How did you implement Prometheus, Grafana in EKS?
- Prometheus collects metrics.
- Grafana visualizes metrics.
- Helm is used to deploy both in the EKS cluster

Q - How does Prometheus get the server logs? (mechanism of Prometheus)
- Prometheus is a monitoring tool that collects and stores metrics data.
- Exporters expose metrics.
- Prometheus scrapes metrics from exporters.
- Metrics are stored in a time-series database for querying and visualization

Q - How did you create alerts in Grafana?
- Define alert rules.
- Configure notification channels.
- Save the alert configuration in the Grafana dashboard.
- This setup ensures you receive timely notifications based on the metrics you are monitoring.
