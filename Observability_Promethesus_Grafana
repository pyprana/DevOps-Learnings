- System(Application + Infrastructure) - App + Networking - Observability.
- State of the application.
- Failures you can understand.
- State of your infrastructure.
- State of Networking.
- Latency.
- Http Traffic.
- Disk utilization of a particular node on my kubernetes cluster over the last 24 hours.
- CPU utilization of a prticular node of the Kubernetes Cluster.
- Memory Utlization.
- Out of 100 Http Requests or out of 100 API calls that are made to the application, How many are successful.What are the number of requests that were failure.
- State of the system like 
i.) Disk Utilization.
ii.) CPU Utlization.
iii.) Memory Utilization.
iv.) Even the number of requests that are failed or passed.
- Observaility doesnt stop there it will also help you understand why is your system in that state, but it will help you understad why its in a particular state.
- Lets say there are 100 http requests, in that why 5 requests are failed what is the reason for it, which part of the applicatin the request is failing what is the reason for it.
- In which part of the application the request is failing you can get the complete information about the faiure and also understand why is there a memory leak by a particular app.
- How to fix 5 http requests that are failing
So you can get complete traces of this http requests, How the http requests has passed through the load balancer when did it reach the front end application then to the backend 
and then to the database, where exactly is the http request failing. once you get the information you can fix the particular request same happens with the memory leak as well
as application is using more amount of memoery using these traces. You can understand wich part of the application is using more extensivley and how to fix it.
- Three Pillars of Obsevability
- Metrics
- Logging
- Traces
- If you have set of metrics, logs and traces for your application and you have the application in place for tracking the metrics logging and tracing uou have set of observaolity
so the metrics part is basically responsible what is the state of the system
- Logging part is responsibele system in the state and traces will help you understand how to fix that particular state,

                                                                    Promethesus Architecture - Retrieval Time
                                                                     /          |            \
                                                            Alert Manager   Push Gateway     Series Database

- How to configure promethesus as a datsource in grafana..?
- Install Grafana, Setup Grafana, Integrate Grafana
- Promethesus is for visulization.
- Monitoring system collects the metrics or scrapes the metrics pulls the metrics in the dashboard format it can be any kind of dashboard.
- Setup alerts if the value goes above certain paramateres send a text or notification.
- Pulling the info from metrics showing on dashboards also capable of firing alerts.
- Ex - An app is deployed on kubernetes cluster in AWS env lets say the nodes of the kubernetes clusters are AWS vms there is also AWS networking like VPC to understand the 
  state of entire system not only about the app, but the state of your AWS infratsructure even if this is not right your app will not be stable or your app cannot be up and 
  running 24 hours, there will be some user experience.
- CPU of vms of AWS 
- Historical info of CPU at each time.
- Memoery of AWS vms
- Metrics for kubernetes cluster - like Pod status
- How many times the pod went into the crash back loop off throughout a day and at what time the pod went into crashback loop off or the deployment http requests received by
  your application,(Receieving traffic you can understand http request)
- How many users have signed up in the last request, 
- Either these metrics are fed to the system or monitoring automaticlaly pulls these metrics.

                   -----> Push Mechanism
  Monitoring System Scrapes
                  <------ Pull Mechanism    

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Q - How did you implement Prometheus, Grafana in EKS?
- Prometheus collects metrics.
- Grafana visualizes metrics.
- Helm is used to deploy both in the EKS cluster

Q - How does Prometheus get the server logs? (mechanism of Prometheus)
- Prometheus is a monitoring tool that collects and stores metrics data.
- Exporters expose metrics.
- Prometheus scrapes metrics from exporters.
- Metrics are stored in a time-series database for querying and visualization

Q - How did you create alerts in Grafana?
- Define alert rules.
- Configure notification channels.
- Save the alert configuration in the Grafana dashboard.
- This setup ensures you receive timely notifications based on the metrics you are monitoring.

Q - What is Prometheus, and what makes it useful in DevOps?
  - This question checks your foundational knowledge of Prometheus and its value in a DevOps context.
  - Prometheus is an open-source systems monitoring and alerting toolkit designed for reliability and scalability. 
  - It works by scraping metrics from targets, storing them in a time-series database, and enabling complex querying and alerting. 
  - Prometheus is particularly useful in DevOps for tracking performance, identifying issues in real-time, and automating alerts, making it easy to maintain application health and
    meet SLAs.

Q - What are the key components of Prometheus?
  - Prometheus consists of several key components:

 - Prometheus Server: Responsible for scraping and storing metrics in a time-series database.
 - Exporters: Small applications that expose metrics in a Prometheus-compatible format.
 - Alertmanager: Handles alerts generated by Prometheus, supporting alert grouping, silencing, and routing.
 - Pushgateway: Allows short-lived jobs to expose metrics.
 - PromQL: A powerful query language used to retrieve and manipulate time-series data.
 - Visualization Tools: Tools like Grafana, which integrate with Prometheus to visualize metrics.”

Q - Explain how Prometheus scrapes data from targets.
  - This question tests your knowledge of the data collection process in Prometheus.
  - “Prometheus scrapes data by periodically querying endpoints on targets that expose metrics in a specific format, typically /metrics endpoints. 
  - It uses a pull-based approach, where Prometheus itself initiates the data collection based on its scrape configurations. 
  - This setup includes specifying scrape intervals, the target endpoints, and any relabeling configurations needed to customize data collection."

Q - What is an exporter in Prometheus? Can you name a few commonly used exporters?
  - Exporters are critical in Prometheus, and this question checks your familiarity with different exporters.
  - “An exporter in Prometheus is a service that collects metrics from a system and exposes them in a format that Prometheus can scrape. Common exporters include:
  - Node Exporter: For Linux system metrics.
  - Blackbox Exporter: For probing endpoints like HTTP, DNS, TCP, and ICMP.
  - MySQL Exporter: For MySQL database metrics.
  - JMX Exporter: For Java applications.
  - Exporters make it easy to monitor diverse systems and applications using Prometheus.”

Q - What is PromQL, and why is it important?
  - PromQL is a fundamental part of Prometheus, and interviewers may ask about it to assess your ability to retrieve and analyze data.
  - “PromQL, or Prometheus Query Language, is a powerful and flexible language used to query and retrieve metrics from Prometheus’ time-series database. 
  - PromQL allows you to filter, aggregate, and manipulate data to create complex queries for monitoring. 
  - It’s essential for generating detailed insights, visualizations, and alerts, making it one of the core features of Prometheus.”
