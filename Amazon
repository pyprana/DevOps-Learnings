- Meaning of Indices
- Indices (singular: index) refer to the position of an element in a list or array.

- Example:
- python
- nums = [10, 20, 30]
- nums[0] = 10 → index is 0

- nums[1] = 20 → index is 1

- nums[2] = 30 → index is 2

- So, indices are: 0, 1, 2

- In Two Sum:
- When asked to return indices, it means:

- Return the positions of the two numbers in the original list that add up to the target.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- brute force - Try every possible pair in the list and check if their sum equals the target.

- Code (Python):
- python
def twoSum(nums, target):
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target:
                return [i, j]

- How It Works:
- Loop through each number using index i

- For each i, check all numbers after it using index j

- If nums[i] + nums[j] == target, return their indices

- Example:
- python
- nums = [2, 7, 11, 15]
- target = 9
- Try 2 + 7 → ✅ 9 → return [0, 1]

- Time Complexity: O(n^2)
- Slow for large lists. Use only for understanding or small inputs.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Problem: Two Sum.
- Goal: Find two numbers in the array that add up to a given target, and return their indices.

- Hint 1
- A really brute force way would be to search for all possible pairs of numbers but that would be too slow. 
- Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.

- Hint 1: Brute Force Approach
- What it says:
- Try all possible pairs in the array.

- Logic:

- For every element x, try every other element y after it and check if x + y == target.

- Code:

- python
for i in range(len(nums)):
    for j in range(i + 1, len(nums)):
        if nums[i] + nums[j] == target:
            return [i, j]


- Hint 2
- So, if we fix one of the numbers, say x, we have to scan the entire array to find the next number y which is value - x where value is the input parameter. 
- Can we change our array somehow so that this search becomes faster?

- Hint 2: Can We Make Search Faster?
- What it suggests:
- Fix one number x, and try to find y = target - x.
- You need to search if this y exists in the rest of the array.

- Question posed:
- Can we change the array (e.g., sort it) to make this search faster?

- Example Idea:
- Sort the array → use binary search to find target - x.

- But sorting takes O(n log n), and you lose original indices.

- So, while this is better than brute force, it's not ideal because:

- You can't return original indices after sorting without extra work.

- Hint 3
- The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?

- Hint 3: Can We Use Extra Space (Hash Map)?
- Best approach.

- Idea:

- Instead of scanning again and again, store previously seen numbers in a hash map.

- While going through the array, for each number x, check if target - x is already in the hash map.

- If yes → we’ve found our pair!

- Code:
def twoSum(nums, target):
    hashmap = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in hashmap:
            return [hashmap[complement], i]
        hashmap[num] = i

- Why this works:
- We are using a hash map (dictionary) for O(1) average lookup.

- Only one pass through the list — so total time is O(n).

- We don’t change the array and keep the original indices.
## ✅ Why the Hash Map Solution Works (Two Sum)

### ⚙️ Time & Space Complexity
- **Time Complexity:** `O(n)`  
  → We iterate through the list only once.
- **Space Complexity:** `O(n)`  
  → We use a hash map to store previously seen numbers and their indices.

---

### 🧠 Key Benefits

- **Fast Lookup:**  
  Hash map provides **O(1)** average time for checking if a complement exists.

- **Single Pass:**  
  We only go through the list once, making it highly efficient.

- **Preserves Indices:**  
  Since we store each number’s **index** in the map, we don’t lose track of their original positions.

- **No Array Modification:**  
  The original input list is **not sorted or altered**, so we meet the requirement of using the indices directly.

---

### 🧪 Example Dry Run

```python
nums = [2, 7, 11, 15]
target = 9
hashmap = {}

i=0, num=2 → complement=7 → not in hashmap → store 2:0  
i=1, num=7 → complement=2 → found in hashmap → return [0,1]

final Code
def twoSum(nums, target):
    hashmap = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in hashmap:
            return [hashmap[complement], i]
        hashmap[num] = i

- Simple Explanation (Line by Line):
- Step-by-step plan:
- You’re given:

- An array of integers nums.

- A target number.

- You need to find:

- Two numbers in nums whose sum = target.

- Return their indices, not the numbers themselves.

- Example:
- nums = [2, 7, 11, 15]
- target = 9

- Explanation:

- 2 + 7 = 9

- Their indices are [0, 1]

- Optimal Code (Python):
def twoSum(nums, target):
    hashmap = {}  # Store numbers we’ve seen and their indices
    for i, num in enumerate(nums):
        complement = target - num  # What number do we need to make the sum?
        if complement in hashmap:
            return [hashmap[complement], i]  # Found the two numbers
        hashmap[num] = i  # Store this number with its index

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Line-by-Line Breakdown:
hashmap = {}

👉 Create an empty dictionary.
👉 It will store {number: index} pairs
👉 Helps to find if we've already seen the number we need.

- for i, num in enumerate(nums):
- Loop over the array with index i and value num

- complement = target - num

- Calculate the number you need to reach the target.
👉 Example: If target=9 and num=2, you need 9-2 = 7

- if complement in hashmap:
- Check if we already saw the number we need earlier.
👉 Example: If 7 is already in hashmap, we now have both numbers

- return [hashmap[complement], i]
- Return the indices:

- hashmap[complement] gives index of the earlier number

- i is the current index

- hashmap[num] = i

- Store the current number and its index in case it's needed later.

- Test Example:
- nums = [3, 2, 4]
- target = 6

- Step 1: hashmap = {}
- Step 2: i=0, num=3 → complement = 3 → not in hashmap → store 3:0
- Step 3: i=1, num=2 → complement = 4 → not in hashmap → store 2:1
- Step 4: i=2, num=4 → complement = 2 → 2 is in hashmap → return [1,2]

- Output:
- python
- [1, 2]


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

- Problem: Valid Parentheses
- You’re given a string s with only brackets: (), {}, []
- You must check if it’s valid:

- Every open bracket must have a matching closing bracket.

- Brackets must be closed in the correct order.

- Key Idea: Use a stack
- Why a stack?
- It follows Last In, First Out (LIFO) — perfect for tracking open brackets.

- Python Code:
- python
def isValid(s):
    stack = []
    mapping = {')': '(', '}': '{', ']': '['}

    for char in s:
        if char in mapping:  # If it's a closing bracket
            top = stack.pop() if stack else '#'  # Get last open bracket
            if mapping[char] != top:
                return False  # Doesn't match
        else:
            stack.append(char)  # It's an open bracket

    return not stack  # Return True if stack is empty (all matched)

- Line-by-Line Breakdown:
- python
stack = []

- Create an empty list to use as a stack.

- python
- mapping = {')': '(', '}': '{', ']': '['}

- Define what each closing bracket should match.

- python
for char in s:

- Loop through each character in the input string.

- python
if char in mapping:

- Check if it’s a closing bracket like ), ], }.

- python
top = stack.pop() if stack else '#'

- Try to pop the last open bracket.
- If stack is empty (nothing to match), use # to force a mismatch.

- python
if mapping[char] != top:
    return False

- If the closing bracket doesn’t match the last open bracket → invalid.

- python
else:
    stack.append(char)

- If it’s an open bracket, just add it to the stack.

- python
- return not stack

- If stack is empty → all brackets matched → return True.
- If stack has leftover open brackets → return False.

🧪 Example: s = "([])"
( → push → stack: [(]

[ → push → stack: [(, []

] → pop [ → matches → continue

) → pop ( → matches → continue
✅ stack empty → return True

