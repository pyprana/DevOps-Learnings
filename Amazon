- Problem: Two Sum.
- Goal: Find two numbers in the array that add up to a given target, and return their indices.

- Simple Explanation (Line by Line):
- Step-by-step plan:
- Youâ€™re given:

- An array of integers nums.

- A target number.

- You need to find:

- Two numbers in nums whose sum = target.

- Return their indices, not the numbers themselves.

- Example:
- nums = [2, 7, 11, 15]
- target = 9

- Explanation:

- 2 + 7 = 9

- Their indices are [0, 1]

- Optimal Code (Python):
def twoSum(nums, target):
    hashmap = {}  # Store numbers weâ€™ve seen and their indices
    for i, num in enumerate(nums):
        complement = target - num  # What number do we need to make the sum?
        if complement in hashmap:
            return [hashmap[complement], i]  # Found the two numbers
        hashmap[num] = i  # Store this number with its index

Line-by-Line Breakdown:
hashmap = {}

ðŸ‘‰ Create an empty dictionary.
ðŸ‘‰ It will store {number: index} pairs
ðŸ‘‰ Helps to find if we've already seen the number we need.

- for i, num in enumerate(nums):
- Loop over the array with index i and value num

- complement = target - num

- Calculate the number you need to reach the target.
ðŸ‘‰ Example: If target=9 and num=2, you need 9-2 = 7

- if complement in hashmap:
- Check if we already saw the number we need earlier.
ðŸ‘‰ Example: If 7 is already in hashmap, we now have both numbers

- return [hashmap[complement], i]
- Return the indices:

- hashmap[complement] gives index of the earlier number

- i is the current index

- hashmap[num] = i

- Store the current number and its index in case it's needed later.

- Test Example:
- nums = [3, 2, 4]
- target = 6

- Step 1: hashmap = {}
- Step 2: i=0, num=3 â†’ complement = 3 â†’ not in hashmap â†’ store 3:0
- Step 3: i=1, num=2 â†’ complement = 4 â†’ not in hashmap â†’ store 2:1
- Step 4: i=2, num=4 â†’ complement = 2 â†’ 2 is in hashmap â†’ return [1,2]

- Output:
- python
- [1, 2]
