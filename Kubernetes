Kubernetes

Q - Which new technology have you learned recently?
A - Kubernetes – setup cluster, created pods using YAML. Used Helm for deployment.

Q - How is networking handled in Kubernetes?
A - Kubernetes has no built-in network layer like Docker. Network policies and CNI plugins are used to manage traffic between pods.

Q - Did you automate Kubernetes deployments?
A - Yes, using Helm charts to package and deploy apps across namespaces in Kubernetes clusters.

Q - How you manage secrets and variables in Kubernetes?
A - Secrets: Store and manage sensitive data securely.
  - ConfigMaps: Store and manage non-sensitive configuration data.
  - Both can be used in pods as volumes or environment variables for secure and efficient configuration management.

Q - How to troubleshoot issues when  pod failed?
A - Check Pod Status: Use the command kubectl get pods to check the status of the pod.
  - Describe Pod: Use kubectl describe pod <pod-name> to get detailed information about the pod, including events and error messages.
  - View Logs: Use kubectl logs <pod-name> to view the logs of the pod's containers for error messages.
  - Check Events: Use kubectl get events to check for cluster-wide events that might affect the pod.
  - Inspect YAML: Review the pod's YAML configuration for any misconfigurations.

Q - How Kubernetes handle network communication between containers..?
A - Kubernetes uses a flat, cluster-wide network let all the pods communicate directly.
  - To ensure seamless communication between containers, services and external systems.
  - Used when pods need to talk to each other across namespaces or nodes.
  - Handled via CNI(Container Network Interface) plugins. E.,(Calico, Flannel, Cilum).
  - Examples - Pod-to-Pod:curl<pod-ip>
  - Pod-to-Service: curl
  - http://service-name>
  - Across Nodes : CNI ensures routing between pods on different nodes.

Q - I want to update the secrets Without restarting app?
A - By default, secrets mounted as environment variables or through volume mounts won't reflect changes unless the pod is restarted. 
  - To avoid restarts:
  - Use CSI Secret Store Drivers like AWS Secrets Manager CSI Driver or HashiCorp Vault Agent Injector. 
  - These allow secrets to be dynamically fetched and updated in the mounted file system.
  - Your application must be designed to either:
  - Read the secret from the file each time it's needed.
  - Watch the file for changes and reload the configuration.

Q - How do ¥ou do the node maintenance in kubernetes
  - Node maintenance in Kubernetes is done to update, patch, or reboot a node without disrupting workloads. Here's how you do it step-by-step:
  - Steps to Perform Node Maintenance:
  - Cordon the Node (mark unschedulable):

- kubectl cordon <node-name>
- Prevents new pods from being scheduled on the node.
- Drain the Node (evict pods):
- kubectl drain <node-name> --ignore-daemonsets --delete-emptydir-data
- Safely evicts all pods (except DaemonSets and mirror pods).
- Perform Maintenance:
- OS patching
- Kernel upgrade
- Hardware updates
- Reboot, etc.
- Uncordon the Node (make schedulable):
- kubectl uncordon <node-name>

⚠️ Considerations:
- Ensure PodDisruptionBudgets (PDBs) are respected.
- Use --force only if needed (it can cause disruptions).
- Monitor the node status:
- kubectl get nodes

Q - Liveness Probe in Kubernetes is a health check mechanism used to determine if a container is still running properly.
  - What: A periodic check to verify if the application inside a container is alive.
  - Why: To automatically restart the container if it's stuck or unresponsive.
  - When: Used when your app might hang but still appear "running" (e.g., infinite loop, deadlock).
  - Where: Defined in the pod spec under containers → livenessProbe.

- Example (HTTP Check):
- yaml
livenessProbe:
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 10

- Types:
- httpGet: Hits an HTTP endpoint.

- tcpSocket: Checks if a TCP port is open.

- exec: Runs a command inside the container.

Q - security context
  - Security Context in Kubernetes defines privilege and access control settings for Pods or containers.
  - What:
  - A securityContext is a YAML section in a Pod or container spec that sets rules like user ID (UID), group ID (GID), file permissions, and capabilities.
  - Why:
  - It helps improve security posture by limiting the container's access level and reducing risks like privilege escalation or running as root.
  - When:
  - Used when:
  - Enforcing non-root containers.
  - Needing read-only file systems.
  - Restricting Linux capabilities.
  - Enabling SELinux or AppArmor profiles.
  - Where:
  - Defined at two levels:
  - Pod level – applies to all containers.
  - Container level – overrides pod-level settings for that container.

- Example:
yaml
apiVersion: v1
kind: Pod
metadata:
  name: secure-pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 3000
    fsGroup: 2000
  containers:
  - name: app
    image: nginx
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: true

- Here’s a line-by-line explanation of the YAML example using securityContext:

- yaml
- apiVersion: v1
- What: API version of the Kubernetes resource.

- Why: Ensures compatibility with the Kubernetes API server.

- yaml
- kind: Pod
- What: Specifies the type of object — a Pod in this case.

- yaml
- metadata:
- name: secure-pod
- What: Sets the name of the pod as secure-pod.

- Why: Useful for identification and management.

-yaml
-spec:
  securityContext:
- What: Defines pod-level security settings.

- Why: Enforces user, group, and filesystem-level access control.

- yaml
    runAsUser: 1000
- What: All containers in the pod will run as user ID 1000.

- Why: Helps avoid running as root for better security.

- yaml
    runAsGroup: 3000
- What: Processes run with group ID 3000.

- Why: Controls group-level permissions.

- yaml
    fsGroup: 2000
- What: Files created in mounted volumes will belong to group ID 2000.

- Why: Enables shared access to volumes within a specific group.

- yaml
  containers:
  - name: app
    image: nginx
What: Defines a container named app using the nginx image.

- yaml
    securityContext:
- What: Container-level security context overrides or adds to pod-level.

- yaml
      allowPrivilegeEscalation: false
- What: Prevents processes in the container from gaining more privileges than their parent.

- Why: Stops use of commands like sudo or setuid programs to escalate privileges.

- yaml
      readOnlyRootFilesystem: true
- What: Mounts the container's root filesystem as read-only.

- Why: Prevents tampering with system binaries or logs inside the container.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Q - Kubeconfig
- Kubeconfig is a configuration file used by kubectl and other Kubernetes tools to authenticate and connect to a Kubernetes cluster.
- Key Points:
- What: YAML file that holds cluster info, user credentials, and context.
- Why: To allow access and management of Kubernetes clusters securely.
- Where: Usually located at ~/.kube/config on your local machine.
- When: Required whenever you interact with a cluster using kubectl.

- Example:
yaml
apiVersion: v1
clusters:
- cluster:
    server: https://<cluster-endpoint>
    certificate-authority: /path/to/ca.crt
  name: my-cluster
contexts:
- context:
    cluster: my-cluster
    user: my-user
  name: my-context
current-context: my-context
users:
- name: my-user
  user:
    token: <authentication-token>



---------

- ~/.kube/config

- ~/.kube/config is the default Kubeconfig file used by kubectl to interact with a Kubernetes cluster.

- Breakdown:
- Key	Description
- ~	Home directory of the current user.
- .kube	Hidden directory storing Kubernetes config files.
- config	Main file that contains cluster, user, and context details.

- Used For:
- Connecting to multiple clusters.
- Switching contexts (dev, prod, staging).
- Authenticating via tokens, certificates, or plugins.

- Kubernetes supports multiple authentication mechanisms to verify who is making a request to the cluster API server. Here's a short breakdown:
- Authentication Mechanisms in Kubernetes

1.Static Token File
- Simple bearer token file stored on API server.
- Used in development or testing.
- Example: Authorization: Bearer <token>

2.Static Password File
- Username-password pairs in a file.
- Used with basic auth (discouraged in production).

3.X.509 Client Certificates
- TLS client certificates issued by a CA.
- Common for service-to-service or admin authentication.

4.Service Account Tokens
- Automatically mounted into pods.
- Used for in-cluster communication.

5.OIDC (OpenID Connect)
- Integrates with identity providers (e.g., Google, Azure AD).
- Recommended for enterprise SSO use.

6.Webhook Token Authentication
- API server forwards credentials to external service.
- Flexible, for custom auth logic.

7.Authentication Proxy
- Fronts the API server and handles user auth.

Step-by-Step Pod Troubleshooting
1. Check Pod Status
- kubectl get pod <pod-name> -n <namespace>
- Look for status: CrashLoopBackOff, Pending, ImagePullBackOff, etc.

2. Describe the Pod
- kubectl describe pod <pod-name> -n <namespace>
- Check:
- Events (at bottom)
- Scheduling issues (node selectors, taints, resources)
- Liveness/readiness probe failures

3. Check Pod Logs
- kubectl logs <pod-name> -n <namespace>       # For single container
- kubectl logs <pod-name> -c <container-name>   # For multi-container
- Look for:
- Application errors
- Configuration issues (ports, DB, env vars)

4. Check Node Health
- kubectl get nodes
- kubectl describe node <node-name>
- Ensure:
- Node is Ready
- Sufficient CPU/memory

5. Check Events in Namespace
- kubectl get events -n <namespace> --sort-by=.metadata.creationTimestamp
- Find:
- Scheduling errors
- Image pull issues
- Network problems

6. Check for Image Pull Issues
- kubectl describe pod <pod-name>
- Look for:
- ImagePullBackOff
- Wrong image name/tag
- Missing imagePullSecrets

7. Check Resource Limits
- Pod may be evicted or pending due to CPU/Memory limits.
- Use describe to inspect.

8. Check Network/DNS Issues
- kubectl exec -it <pod> -- nslookup <service-name>
- Ensure:
- DNS is resolving
- Network policies aren’t blocking traffic

9. Check PVC or Volume Mount Issues
- kubectl describe pvc <pvc-name> -n <namespace>
- Look for:
- Pending or Failed status
- StorageClass or access mode mismatches

10. Check Init Containers
- kubectl describe pod <pod-name>
- Ensure init containers completed successfully.

