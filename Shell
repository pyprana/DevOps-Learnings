1. What is Shell Scripting?
- A shell script is a file with a sequence of shell commands that the shell executes in order.

2. Basic Concepts
- Shebang (#!): Indicates the interpreter, e.g., #!/bin/bash

- Variables: name="Pranay"; Access with $name

- Echo: Outputs text, e.g., echo "Hello"

- Comments: # This is a comment

- Exit Status: $? stores last command's result

3. Control Structures
-  If Statement:

if [ $x -eq 5 ]; then
  echo "x is 5"
fi

- If-Else:

if [ $x -gt 10 ]; then
  echo "Big"
else
  echo "Small"
fi

- Case Statement:

case $x in
  1) echo "One";;
  2) echo "Two";;
  *) echo "Other";;
esac

- Loops:

- For:

  for i in 1 2 3; do echo $i; done

- While:

while [ $x -lt 5 ]; do echo $x; x=$((x+1)); done

- Until:

until [ $x -gt 5 ]; do echo $x; x=$((x+1)); done

4. Functions
- function greet() {
  echo "Hello $1"
 }
greet "User"

5. Command Substitution

 today=$(date)
 echo "Today is $today"

6. Reading User Input

 read -p "Enter name: " name
 echo "Welcome $name"

7. Arrays
- arr=(one two three)
  echo "${arr[1]}"   # two

8. File Operations
-  Redirection: >, >>, <

  Input from file: while read line; do echo $line; done < file.txt

9. String Operations
- str="Hello"
  len=${#str}         # 5
  sub=${str:1:3}      # ell

10. Arithmetic
- x=$((5 + 3))

11. Error Handling
- command || echo "Failed"
- command && echo "Success"

12. Debugging
- Run with: bash -x script.sh

13. Cron Jobs
- Automate with crontab -e:
  0 5 * * * /path/to/script.sh

14. Logging
- echo "Start" >> /var/log/script.log

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

1. Pull Latest Code & Restart Service
#!/bin/bash
echo "Starting deployment..."
cd /var/www/myapp || exit 1
git pull origin main || { echo "Git pull failed"; exit 1; }
echo "Restarting application service..."
systemctl restart myapp.service || { echo "Failed to restart service"; exit 1; }
echo "Deployment successful!"
Use Case: Simple app redeployment via Git and systemd.

15. Permissions
- Make executable:

chmod +x script.sh


- How to use pipe commands?
- Pipe command allows you to use several commands in the same way, in which the output of one is used as input for another.
- Like a pipeline, each process output is directly input to the next one. 
- A pipe is represented by the symbol "|". The flow of data through a pipeline is unidirectional, i.e., from left to right.

- Syntax :

- command_1 | command_2 | command_3 | .... | command_N

- Write the difference between $$ and $!?
- You can use $$ to get the process id of the current process. However, $! displays the process id for a background process that recently went away.

- Name the command that one should use to know how long the system has been running.
- Using the Uptime command, you can see how long your system has been active. 
- You can also determine the number of users with running sessions, and the average system load for 1, 5, and 15 minutes. 
- The information displayed at once can also be filtered based on your specified options. 

- Example: $ uptime   

- Entering the above command at the shell prompt, namely $ uptime, will produce the following output:

- 9:21am  up 86 day(s), 11:46,  3 users,  load average: 2.24, 2.18, 2.16


- Explain how you will open a read-only file in Unix/Shell.
- You can open a read-only file by: vi â€“R <Filename>

